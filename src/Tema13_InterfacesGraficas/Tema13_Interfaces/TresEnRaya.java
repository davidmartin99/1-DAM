
package Tema13_Interfaces;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author david
 */
public class TresEnRaya extends javax.swing.JFrame {

    private JButton[][] botones;
    private boolean turnoX = true;
    private int movimientos = 0;

    /**
     * Creates new form TresEnRaya
     */
    public TresEnRaya() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        panelPrincipal.setLayout(new java.awt.GridLayout(3, 3));

        botones = new JButton[3][3];

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                botones[i][j] = new JButton();
                botones[i][j].setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 60));
                botones[i][j].setFocusable(false);
                botones[i][j].addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        botonActionPerformed(evt);
                    }
                });
                panelPrincipal.add(botones[i][j]);
            }
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void botonActionPerformed(java.awt.event.ActionEvent evt) {                                       
        JButton boton = (JButton) evt.getSource();

        if (!boton.getText().equals("")) {
            return;
        }

        boton.setText(turnoX ? "X" : "O");
        movimientos++;

        if (verificarGanador()) {
            JOptionPane.showMessageDialog(this, "Jugador " + (turnoX ? "X" : "O") + " gana!");
            reiniciarJuego();
        } else if (movimientos == 9) {
            JOptionPane.showMessageDialog(this, "Empate!");
            reiniciarJuego();
        }

        turnoX = !turnoX;
    }

    private boolean verificarGanador() {
        // Verificar filas y columnas
        for (int i = 0; i < 3; i++) {
            if (botones[i][0].getText().equals(botones[i][1].getText()) &&
                botones[i][1].getText().equals(botones[i][2].getText()) &&
                !botones[i][0].getText().equals("")) {
                return true;
            }
            if (botones[0][i].getText().equals(botones[1][i].getText()) &&
                botones[1][i].getText().equals(botones[2][i].getText()) &&
                !botones[0][i].getText().equals("")) {
                return true;
            }
        }

        // Verificar diagonales
        if (botones[0][0].getText().equals(botones[1][1].getText()) &&
            botones[1][1].getText().equals(botones[2][2].getText()) &&
            !botones[0][0].getText().equals("")) {
            return true;
        }
        if (botones[0][2].getText().equals(botones[1][1].getText()) &&
            botones[1][1].getText().equals(botones[2][0].getText()) &&
            !botones[0][2].getText().equals("")) {
            return true;
        }

        return false;
    }

    private void reiniciarJuego() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                botones[i][j].setText("");
            }
        }
        movimientos = 0;
        turnoX = true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TresEnRaya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TresEnRaya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TresEnRaya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TresEnRaya.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TresEnRaya().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel panelPrincipal;
    // End of variables declaration                   
}

/*
Explicación del Código
Componentes Añadidos:

panelPrincipal para contener los botones del juego.
Matriz de botones botones para los 9 botones de la cuadrícula.
Lógica del Juego:

botonActionPerformed: Método que se ejecuta cuando un botón es presionado. Marca el botón con "X" o "O" dependiendo del turno.
verificarGanador: Método que verifica si hay un ganador revisando filas, columnas y diagonales.
reiniciarJuego: Método para reiniciar el juego después de un ganador o un empate.
Diseño de la Interfaz:

Uso de GridLayout para organizar los botones en una cuadrícula de 3x3.
*/